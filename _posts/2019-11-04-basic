---
excerpt: "(1) 파이썬고급 기초 "
header:
  overlay_image: /assets/images/2computers.jpg
  overlay_filter: 0.5 # same as adding an opacity of 0.5 to a black background
  caption: "Photo credit: [**Unsplash**]"
  actions:
    - label: "Reference"
      url: "https://docs.python.org/3/"
title: "[Python] 파이썬 고급 기초 정리"
date: 2019-11-04 00:00:00 -0400
categories: python jupyter
tags: lecture python jupyter 
---

---
**본 과정은 제가 파이썬 수업을 들으면서 배운 내용을 복습하는 과정에서 적어본 것입니다.<br> 틀린 부분이 있다면 댓글에 남겨주시면 고치도록 하겠습니다.<br> 확실하지 않은 내용은 '(?)'을 함께 적었으니 그 내용을 아신다면 댓글에 남겨주시면 감사하겠습니다.**
{: .notice--warning}

--- 
* 책 추천: 손에 잡히는 파이썬, float 파이썬 (?)


# 2019년 11월 4일 
## 1) Python 
### 파이썬이란? 
- 파이썬은 배우기 쉽고, 강력한 프로그래밍 언어입니다. 효율적인 자료 구조들과 객체 지향 프로그래밍에 대해 간단하고도 효과적인 접근법을 제공합니다. 우아한 문법과 동적 타이핑(typing)은, 인터프리터 적인 특징들과 더불어, 대부분 플랫폼과 다양한 문제 영역에서 스크립트 작성과 빠른 응용 프로그램 개발에 이상적인 환경을 제공합니다.

```python
# 파이썬 철학 및 소개
import this 
import antigravity 
```

#### 할당문 특징
- 할당 (assignments) 
    * (식별자: name, identifier) a=1 (표현식: 하나의 결과값으로 축약할 수 있는 것)
             * 표준 (standard, de facto, recommendation)
             * 이름 다 대문자: 상수 취급 (파이썬은 상수가 없는 언어) 
             * 이름 다 소문자: Module 
    * 식별자 이름 규칙 PEP 8 coding style guide <br>
                                               * 카멜방식(두단어 이상 연결할 때 두번째 문자를 대문자) 클래스이름 만들 때  ex) moonBeauty <br>
                                               * 파스칼방식 ex) MoonBeauty <br>
                                               * snake방식-함수이름 ex) moon_beauty  <br> 
                                               * 갈래상 상수: 다 대문자 (?) <br>
                                               * 헝가리안방식: 접두어에 자료형을 붙이는 것 ex) strName, bBusy, szName (별로 사용 안함) <br>
                                               * 이름에 _(*)가 붙어 있으면 import 할 때 실행이 인된다. 이러한 규칙들은 [언어레퍼런스](https://docs.python.org/ko/3/reference/index.html)에서 찾아볼 수 있다. <br>
                                               * 표현식: ex) 3 if a>0 else 5 <br>
                                               * 표현식의 종류: 람다- 함수식, etc <br>
    * a=1 가 만들어지면
      1) 메모리의 공간 할당  
      2) 메모리 이름 생성 - binding 되는 것 


{% capture notice-2 %}
#### Container
* homogeneous: range, str, bytes, batearray 
    - 요소들이 서로 같은 타입
* heterogeneous: list, tupe, set, dict
    - 요소들이 서로 다른 타입
    - dict: 없는 것을 추가시킬 수 있다. 
            key = hashable(해쉬가 가능한 것만 올 수 있다.)
            
* sequence: list, tuple, range, str, byts, bytearray
* none sequence: set, dict 
    - index, slicing 못 쓴다. 
    
{% endcapture %}

<div class="notice">{{ notice-2 | markdownify }}</div>

---
**무단 배포 금지** 
{: .notice--danger}
